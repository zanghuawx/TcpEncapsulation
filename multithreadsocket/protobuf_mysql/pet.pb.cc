// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace petproto {

namespace {

const ::google::protobuf::Descriptor* PetProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pet_2eproto() {
  protobuf_AddDesc_pet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pet.proto");
  GOOGLE_CHECK(file != NULL);
  PetProto_descriptor_ = file->message_type(0);
  static const int PetProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, species_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, birth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, death_),
  };
  PetProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetProto_descriptor_,
      PetProto::default_instance_,
      PetProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetProto_descriptor_, &PetProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pet_2eproto() {
  delete PetProto::default_instance_;
  delete PetProto_reflection_;
  delete PetProto::_default_owner_;
  delete PetProto::_default_species_;
  delete PetProto::_default_sex_;
}

void protobuf_AddDesc_pet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpet.proto\022\010petproto\"x\n\010PetProto\022\014\n\004nam"
    "e\030\001 \001(\t\022\030\n\005owner\030\002 \001(\t:\tSunYanxia\022\026\n\007spe"
    "cies\030\003 \001(\t:\005koala\022\016\n\003sex\030\004 \001(\t:\001m\022\r\n\005bir"
    "th\030\005 \001(\t\022\r\n\005death\030\006 \001(\t", 143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pet.proto", &protobuf_RegisterTypes);
  PetProto::_default_owner_ =
      new ::std::string("SunYanxia", 9);
  PetProto::_default_species_ =
      new ::std::string("koala", 5);
  PetProto::_default_sex_ =
      new ::std::string("m", 1);
  PetProto::default_instance_ = new PetProto();
  PetProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pet_2eproto {
  StaticDescriptorInitializer_pet_2eproto() {
    protobuf_AddDesc_pet_2eproto();
  }
} static_descriptor_initializer_pet_2eproto_;

// ===================================================================

::std::string* PetProto::_default_owner_ = NULL;
::std::string* PetProto::_default_species_ = NULL;
::std::string* PetProto::_default_sex_ = NULL;
#ifndef _MSC_VER
const int PetProto::kNameFieldNumber;
const int PetProto::kOwnerFieldNumber;
const int PetProto::kSpeciesFieldNumber;
const int PetProto::kSexFieldNumber;
const int PetProto::kBirthFieldNumber;
const int PetProto::kDeathFieldNumber;
#endif  // !_MSC_VER

PetProto::PetProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:petproto.PetProto)
}

void PetProto::InitAsDefaultInstance() {
}

PetProto::PetProto(const PetProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:petproto.PetProto)
}

void PetProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_ = const_cast< ::std::string*>(_default_owner_);
  species_ = const_cast< ::std::string*>(_default_species_);
  sex_ = const_cast< ::std::string*>(_default_sex_);
  birth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  death_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetProto::~PetProto() {
  // @@protoc_insertion_point(destructor:petproto.PetProto)
  SharedDtor();
}

void PetProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (owner_ != _default_owner_) {
    delete owner_;
  }
  if (species_ != _default_species_) {
    delete species_;
  }
  if (sex_ != _default_sex_) {
    delete sex_;
  }
  if (birth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birth_;
  }
  if (death_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete death_;
  }
  if (this != default_instance_) {
  }
}

void PetProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetProto_descriptor_;
}

const PetProto& PetProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

PetProto* PetProto::default_instance_ = NULL;

PetProto* PetProto::New() const {
  return new PetProto;
}

void PetProto::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_owner()) {
      if (owner_ != _default_owner_) {
        owner_->assign(*_default_owner_);
      }
    }
    if (has_species()) {
      if (species_ != _default_species_) {
        species_->assign(*_default_species_);
      }
    }
    if (has_sex()) {
      if (sex_ != _default_sex_) {
        sex_->assign(*_default_sex_);
      }
    }
    if (has_birth()) {
      if (birth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        birth_->clear();
      }
    }
    if (has_death()) {
      if (death_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        death_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:petproto.PetProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_owner;
        break;
      }

      // optional string owner = 2 [default = "SunYanxia"];
      case 2: {
        if (tag == 18) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "owner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_species;
        break;
      }

      // optional string species = 3 [default = "koala"];
      case 3: {
        if (tag == 26) {
         parse_species:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_species()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->species().data(), this->species().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "species");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sex;
        break;
      }

      // optional string sex = 4 [default = "m"];
      case 4: {
        if (tag == 34) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_birth;
        break;
      }

      // optional string birth = 5;
      case 5: {
        if (tag == 42) {
         parse_birth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->birth().data(), this->birth().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "birth");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_death;
        break;
      }

      // optional string death = 6;
      case 6: {
        if (tag == 50) {
         parse_death:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_death()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->death().data(), this->death().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "death");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:petproto.PetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:petproto.PetProto)
  return false;
#undef DO_
}

void PetProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:petproto.PetProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string owner = 2 [default = "SunYanxia"];
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner(), output);
  }

  // optional string species = 3 [default = "koala"];
  if (has_species()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->species().data(), this->species().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "species");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->species(), output);
  }

  // optional string sex = 4 [default = "m"];
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sex(), output);
  }

  // optional string birth = 5;
  if (has_birth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birth().data(), this->birth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->birth(), output);
  }

  // optional string death = 6;
  if (has_death()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->death().data(), this->death().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "death");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->death(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:petproto.PetProto)
}

::google::protobuf::uint8* PetProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:petproto.PetProto)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string owner = 2 [default = "SunYanxia"];
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner(), target);
  }

  // optional string species = 3 [default = "koala"];
  if (has_species()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->species().data(), this->species().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "species");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->species(), target);
  }

  // optional string sex = 4 [default = "m"];
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sex(), target);
  }

  // optional string birth = 5;
  if (has_birth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->birth().data(), this->birth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "birth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->birth(), target);
  }

  // optional string death = 6;
  if (has_death()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->death().data(), this->death().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "death");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->death(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:petproto.PetProto)
  return target;
}

int PetProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string owner = 2 [default = "SunYanxia"];
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }

    // optional string species = 3 [default = "koala"];
    if (has_species()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->species());
    }

    // optional string sex = 4 [default = "m"];
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // optional string birth = 5;
    if (has_birth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birth());
    }

    // optional string death = 6;
    if (has_death()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->death());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetProto::MergeFrom(const PetProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_species()) {
      set_species(from.species());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_birth()) {
      set_birth(from.birth());
    }
    if (from.has_death()) {
      set_death(from.death());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetProto::CopyFrom(const PetProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetProto::IsInitialized() const {

  return true;
}

void PetProto::Swap(PetProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(owner_, other->owner_);
    std::swap(species_, other->species_);
    std::swap(sex_, other->sex_);
    std::swap(birth_, other->birth_);
    std::swap(death_, other->death_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetProto_descriptor_;
  metadata.reflection = PetProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace petproto

// @@protoc_insertion_point(global_scope)
