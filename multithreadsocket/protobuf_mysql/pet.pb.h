// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.proto

#ifndef PROTOBUF_pet_2eproto__INCLUDED
#define PROTOBUF_pet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace petproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pet_2eproto();
void protobuf_AssignDesc_pet_2eproto();
void protobuf_ShutdownFile_pet_2eproto();

class PetProto;

// ===================================================================

class PetProto : public ::google::protobuf::Message {
 public:
  PetProto();
  virtual ~PetProto();

  PetProto(const PetProto& from);

  inline PetProto& operator=(const PetProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetProto& default_instance();

  void Swap(PetProto* other);

  // implements Message ----------------------------------------------

  PetProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetProto& from);
  void MergeFrom(const PetProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string owner = 2 [default = "SunYanxia"];
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline const ::std::string& owner() const;
  inline void set_owner(const ::std::string& value);
  inline void set_owner(const char* value);
  inline void set_owner(const char* value, size_t size);
  inline ::std::string* mutable_owner();
  inline ::std::string* release_owner();
  inline void set_allocated_owner(::std::string* owner);

  // optional string species = 3 [default = "koala"];
  inline bool has_species() const;
  inline void clear_species();
  static const int kSpeciesFieldNumber = 3;
  inline const ::std::string& species() const;
  inline void set_species(const ::std::string& value);
  inline void set_species(const char* value);
  inline void set_species(const char* value, size_t size);
  inline ::std::string* mutable_species();
  inline ::std::string* release_species();
  inline void set_allocated_species(::std::string* species);

  // optional string sex = 4 [default = "m"];
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // optional string birth = 5;
  inline bool has_birth() const;
  inline void clear_birth();
  static const int kBirthFieldNumber = 5;
  inline const ::std::string& birth() const;
  inline void set_birth(const ::std::string& value);
  inline void set_birth(const char* value);
  inline void set_birth(const char* value, size_t size);
  inline ::std::string* mutable_birth();
  inline ::std::string* release_birth();
  inline void set_allocated_birth(::std::string* birth);

  // optional string death = 6;
  inline bool has_death() const;
  inline void clear_death();
  static const int kDeathFieldNumber = 6;
  inline const ::std::string& death() const;
  inline void set_death(const ::std::string& value);
  inline void set_death(const char* value);
  inline void set_death(const char* value, size_t size);
  inline ::std::string* mutable_death();
  inline ::std::string* release_death();
  inline void set_allocated_death(::std::string* death);

  // @@protoc_insertion_point(class_scope:petproto.PetProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_species();
  inline void clear_has_species();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_birth();
  inline void clear_has_birth();
  inline void set_has_death();
  inline void clear_has_death();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  static ::std::string* _default_owner_;
  ::std::string* owner_;
  static ::std::string* _default_species_;
  ::std::string* species_;
  static ::std::string* _default_sex_;
  ::std::string* sex_;
  ::std::string* birth_;
  ::std::string* death_;
  friend void  protobuf_AddDesc_pet_2eproto();
  friend void protobuf_AssignDesc_pet_2eproto();
  friend void protobuf_ShutdownFile_pet_2eproto();

  void InitAsDefaultInstance();
  static PetProto* default_instance_;
};
// ===================================================================


// ===================================================================

// PetProto

// optional string name = 1;
inline bool PetProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PetProto::name() const {
  // @@protoc_insertion_point(field_get:petproto.PetProto.name)
  return *name_;
}
inline void PetProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:petproto.PetProto.name)
}
inline void PetProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:petproto.PetProto.name)
}
inline void PetProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:petproto.PetProto.name)
}
inline ::std::string* PetProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:petproto.PetProto.name)
  return name_;
}
inline ::std::string* PetProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:petproto.PetProto.name)
}

// optional string owner = 2 [default = "SunYanxia"];
inline bool PetProto::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetProto::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetProto::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetProto::clear_owner() {
  if (owner_ != _default_owner_) {
    owner_->assign(*_default_owner_);
  }
  clear_has_owner();
}
inline const ::std::string& PetProto::owner() const {
  // @@protoc_insertion_point(field_get:petproto.PetProto.owner)
  return *owner_;
}
inline void PetProto::set_owner(const ::std::string& value) {
  set_has_owner();
  if (owner_ == _default_owner_) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
  // @@protoc_insertion_point(field_set:petproto.PetProto.owner)
}
inline void PetProto::set_owner(const char* value) {
  set_has_owner();
  if (owner_ == _default_owner_) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
  // @@protoc_insertion_point(field_set_char:petproto.PetProto.owner)
}
inline void PetProto::set_owner(const char* value, size_t size) {
  set_has_owner();
  if (owner_ == _default_owner_) {
    owner_ = new ::std::string;
  }
  owner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:petproto.PetProto.owner)
}
inline ::std::string* PetProto::mutable_owner() {
  set_has_owner();
  if (owner_ == _default_owner_) {
    owner_ = new ::std::string(*_default_owner_);
  }
  // @@protoc_insertion_point(field_mutable:petproto.PetProto.owner)
  return owner_;
}
inline ::std::string* PetProto::release_owner() {
  clear_has_owner();
  if (owner_ == _default_owner_) {
    return NULL;
  } else {
    ::std::string* temp = owner_;
    owner_ = const_cast< ::std::string*>(_default_owner_);
    return temp;
  }
}
inline void PetProto::set_allocated_owner(::std::string* owner) {
  if (owner_ != _default_owner_) {
    delete owner_;
  }
  if (owner) {
    set_has_owner();
    owner_ = owner;
  } else {
    clear_has_owner();
    owner_ = const_cast< ::std::string*>(_default_owner_);
  }
  // @@protoc_insertion_point(field_set_allocated:petproto.PetProto.owner)
}

// optional string species = 3 [default = "koala"];
inline bool PetProto::has_species() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetProto::set_has_species() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetProto::clear_has_species() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetProto::clear_species() {
  if (species_ != _default_species_) {
    species_->assign(*_default_species_);
  }
  clear_has_species();
}
inline const ::std::string& PetProto::species() const {
  // @@protoc_insertion_point(field_get:petproto.PetProto.species)
  return *species_;
}
inline void PetProto::set_species(const ::std::string& value) {
  set_has_species();
  if (species_ == _default_species_) {
    species_ = new ::std::string;
  }
  species_->assign(value);
  // @@protoc_insertion_point(field_set:petproto.PetProto.species)
}
inline void PetProto::set_species(const char* value) {
  set_has_species();
  if (species_ == _default_species_) {
    species_ = new ::std::string;
  }
  species_->assign(value);
  // @@protoc_insertion_point(field_set_char:petproto.PetProto.species)
}
inline void PetProto::set_species(const char* value, size_t size) {
  set_has_species();
  if (species_ == _default_species_) {
    species_ = new ::std::string;
  }
  species_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:petproto.PetProto.species)
}
inline ::std::string* PetProto::mutable_species() {
  set_has_species();
  if (species_ == _default_species_) {
    species_ = new ::std::string(*_default_species_);
  }
  // @@protoc_insertion_point(field_mutable:petproto.PetProto.species)
  return species_;
}
inline ::std::string* PetProto::release_species() {
  clear_has_species();
  if (species_ == _default_species_) {
    return NULL;
  } else {
    ::std::string* temp = species_;
    species_ = const_cast< ::std::string*>(_default_species_);
    return temp;
  }
}
inline void PetProto::set_allocated_species(::std::string* species) {
  if (species_ != _default_species_) {
    delete species_;
  }
  if (species) {
    set_has_species();
    species_ = species;
  } else {
    clear_has_species();
    species_ = const_cast< ::std::string*>(_default_species_);
  }
  // @@protoc_insertion_point(field_set_allocated:petproto.PetProto.species)
}

// optional string sex = 4 [default = "m"];
inline bool PetProto::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetProto::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetProto::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetProto::clear_sex() {
  if (sex_ != _default_sex_) {
    sex_->assign(*_default_sex_);
  }
  clear_has_sex();
}
inline const ::std::string& PetProto::sex() const {
  // @@protoc_insertion_point(field_get:petproto.PetProto.sex)
  return *sex_;
}
inline void PetProto::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == _default_sex_) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
  // @@protoc_insertion_point(field_set:petproto.PetProto.sex)
}
inline void PetProto::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == _default_sex_) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
  // @@protoc_insertion_point(field_set_char:petproto.PetProto.sex)
}
inline void PetProto::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == _default_sex_) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:petproto.PetProto.sex)
}
inline ::std::string* PetProto::mutable_sex() {
  set_has_sex();
  if (sex_ == _default_sex_) {
    sex_ = new ::std::string(*_default_sex_);
  }
  // @@protoc_insertion_point(field_mutable:petproto.PetProto.sex)
  return sex_;
}
inline ::std::string* PetProto::release_sex() {
  clear_has_sex();
  if (sex_ == _default_sex_) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(_default_sex_);
    return temp;
  }
}
inline void PetProto::set_allocated_sex(::std::string* sex) {
  if (sex_ != _default_sex_) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(_default_sex_);
  }
  // @@protoc_insertion_point(field_set_allocated:petproto.PetProto.sex)
}

// optional string birth = 5;
inline bool PetProto::has_birth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetProto::set_has_birth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetProto::clear_has_birth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetProto::clear_birth() {
  if (birth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_->clear();
  }
  clear_has_birth();
}
inline const ::std::string& PetProto::birth() const {
  // @@protoc_insertion_point(field_get:petproto.PetProto.birth)
  return *birth_;
}
inline void PetProto::set_birth(const ::std::string& value) {
  set_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_ = new ::std::string;
  }
  birth_->assign(value);
  // @@protoc_insertion_point(field_set:petproto.PetProto.birth)
}
inline void PetProto::set_birth(const char* value) {
  set_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_ = new ::std::string;
  }
  birth_->assign(value);
  // @@protoc_insertion_point(field_set_char:petproto.PetProto.birth)
}
inline void PetProto::set_birth(const char* value, size_t size) {
  set_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_ = new ::std::string;
  }
  birth_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:petproto.PetProto.birth)
}
inline ::std::string* PetProto::mutable_birth() {
  set_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:petproto.PetProto.birth)
  return birth_;
}
inline ::std::string* PetProto::release_birth() {
  clear_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = birth_;
    birth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetProto::set_allocated_birth(::std::string* birth) {
  if (birth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birth_;
  }
  if (birth) {
    set_has_birth();
    birth_ = birth;
  } else {
    clear_has_birth();
    birth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:petproto.PetProto.birth)
}

// optional string death = 6;
inline bool PetProto::has_death() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PetProto::set_has_death() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PetProto::clear_has_death() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PetProto::clear_death() {
  if (death_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    death_->clear();
  }
  clear_has_death();
}
inline const ::std::string& PetProto::death() const {
  // @@protoc_insertion_point(field_get:petproto.PetProto.death)
  return *death_;
}
inline void PetProto::set_death(const ::std::string& value) {
  set_has_death();
  if (death_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    death_ = new ::std::string;
  }
  death_->assign(value);
  // @@protoc_insertion_point(field_set:petproto.PetProto.death)
}
inline void PetProto::set_death(const char* value) {
  set_has_death();
  if (death_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    death_ = new ::std::string;
  }
  death_->assign(value);
  // @@protoc_insertion_point(field_set_char:petproto.PetProto.death)
}
inline void PetProto::set_death(const char* value, size_t size) {
  set_has_death();
  if (death_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    death_ = new ::std::string;
  }
  death_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:petproto.PetProto.death)
}
inline ::std::string* PetProto::mutable_death() {
  set_has_death();
  if (death_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    death_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:petproto.PetProto.death)
  return death_;
}
inline ::std::string* PetProto::release_death() {
  clear_has_death();
  if (death_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = death_;
    death_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PetProto::set_allocated_death(::std::string* death) {
  if (death_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete death_;
  }
  if (death) {
    set_has_death();
    death_ = death;
  } else {
    clear_has_death();
    death_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:petproto.PetProto.death)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace petproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pet_2eproto__INCLUDED
