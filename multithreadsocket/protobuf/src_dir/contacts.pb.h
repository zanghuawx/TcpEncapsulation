// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contacts.proto

#ifndef PROTOBUF_contacts_2eproto__INCLUDED
#define PROTOBUF_contacts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace contact {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_contacts_2eproto();
void protobuf_AssignDesc_contacts_2eproto();
void protobuf_ShutdownFile_contacts_2eproto();

class contacts;

enum contacts_Groups {
  contacts_Groups_FAMILY = 0,
  contacts_Groups_FRIEND = 1,
  contacts_Groups_CLASSMATE = 2,
  contacts_Groups_WORKMATE = 3,
  contacts_Groups_COLLEGE = 4,
  contacts_Groups_STRANGER = 5
};
bool contacts_Groups_IsValid(int value);
const contacts_Groups contacts_Groups_Groups_MIN = contacts_Groups_FAMILY;
const contacts_Groups contacts_Groups_Groups_MAX = contacts_Groups_STRANGER;
const int contacts_Groups_Groups_ARRAYSIZE = contacts_Groups_Groups_MAX + 1;

const ::google::protobuf::EnumDescriptor* contacts_Groups_descriptor();
inline const ::std::string& contacts_Groups_Name(contacts_Groups value) {
  return ::google::protobuf::internal::NameOfEnum(
    contacts_Groups_descriptor(), value);
}
inline bool contacts_Groups_Parse(
    const ::std::string& name, contacts_Groups* value) {
  return ::google::protobuf::internal::ParseNamedEnum<contacts_Groups>(
    contacts_Groups_descriptor(), name, value);
}
// ===================================================================

class contacts : public ::google::protobuf::Message {
 public:
  contacts();
  virtual ~contacts();

  contacts(const contacts& from);

  inline contacts& operator=(const contacts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const contacts& default_instance();

  void Swap(contacts* other);

  // implements Message ----------------------------------------------

  contacts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const contacts& from);
  void MergeFrom(const contacts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef contacts_Groups Groups;
  static const Groups FAMILY = contacts_Groups_FAMILY;
  static const Groups FRIEND = contacts_Groups_FRIEND;
  static const Groups CLASSMATE = contacts_Groups_CLASSMATE;
  static const Groups WORKMATE = contacts_Groups_WORKMATE;
  static const Groups COLLEGE = contacts_Groups_COLLEGE;
  static const Groups STRANGER = contacts_Groups_STRANGER;
  static inline bool Groups_IsValid(int value) {
    return contacts_Groups_IsValid(value);
  }
  static const Groups Groups_MIN =
    contacts_Groups_Groups_MIN;
  static const Groups Groups_MAX =
    contacts_Groups_Groups_MAX;
  static const int Groups_ARRAYSIZE =
    contacts_Groups_Groups_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Groups_descriptor() {
    return contacts_Groups_descriptor();
  }
  static inline const ::std::string& Groups_Name(Groups value) {
    return contacts_Groups_Name(value);
  }
  static inline bool Groups_Parse(const ::std::string& name,
      Groups* value) {
    return contacts_Groups_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1 [default = "lishimin"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string number = 2 [default = "13030002000"];
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // repeated .contact.contacts.Groups groups = 3;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 3;
  inline ::contact::contacts_Groups groups(int index) const;
  inline void set_groups(int index, ::contact::contacts_Groups value);
  inline void add_groups(::contact::contacts_Groups value);
  inline const ::google::protobuf::RepeatedField<int>& groups() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_groups();

  // repeated int32 priority = 4;
  inline int priority_size() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::int32 priority(int index) const;
  inline void set_priority(int index, ::google::protobuf::int32 value);
  inline void add_priority(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      priority() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_priority();

  // repeated string email = 5;
  inline int email_size() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::std::string& email(int index) const;
  inline ::std::string* mutable_email(int index);
  inline void set_email(int index, const ::std::string& value);
  inline void set_email(int index, const char* value);
  inline void set_email(int index, const char* value, size_t size);
  inline ::std::string* add_email();
  inline void add_email(const ::std::string& value);
  inline void add_email(const char* value);
  inline void add_email(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& email() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_email();

  // @@protoc_insertion_point(class_scope:contact.contacts)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::std::string* name_;
  static ::std::string* _default_number_;
  ::std::string* number_;
  ::google::protobuf::RepeatedField<int> groups_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > priority_;
  ::google::protobuf::RepeatedPtrField< ::std::string> email_;
  friend void  protobuf_AddDesc_contacts_2eproto();
  friend void protobuf_AssignDesc_contacts_2eproto();
  friend void protobuf_ShutdownFile_contacts_2eproto();

  void InitAsDefaultInstance();
  static contacts* default_instance_;
};
// ===================================================================


// ===================================================================

// contacts

// required string name = 1 [default = "lishimin"];
inline bool contacts::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void contacts::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void contacts::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void contacts::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& contacts::name() const {
  // @@protoc_insertion_point(field_get:contact.contacts.name)
  return *name_;
}
inline void contacts::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:contact.contacts.name)
}
inline void contacts::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:contact.contacts.name)
}
inline void contacts::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:contact.contacts.name)
}
inline ::std::string* contacts::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  // @@protoc_insertion_point(field_mutable:contact.contacts.name)
  return name_;
}
inline ::std::string* contacts::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void contacts::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:contact.contacts.name)
}

// optional string number = 2 [default = "13030002000"];
inline bool contacts::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void contacts::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void contacts::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void contacts::clear_number() {
  if (number_ != _default_number_) {
    number_->assign(*_default_number_);
  }
  clear_has_number();
}
inline const ::std::string& contacts::number() const {
  // @@protoc_insertion_point(field_get:contact.contacts.number)
  return *number_;
}
inline void contacts::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == _default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:contact.contacts.number)
}
inline void contacts::set_number(const char* value) {
  set_has_number();
  if (number_ == _default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:contact.contacts.number)
}
inline void contacts::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == _default_number_) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:contact.contacts.number)
}
inline ::std::string* contacts::mutable_number() {
  set_has_number();
  if (number_ == _default_number_) {
    number_ = new ::std::string(*_default_number_);
  }
  // @@protoc_insertion_point(field_mutable:contact.contacts.number)
  return number_;
}
inline ::std::string* contacts::release_number() {
  clear_has_number();
  if (number_ == _default_number_) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(_default_number_);
    return temp;
  }
}
inline void contacts::set_allocated_number(::std::string* number) {
  if (number_ != _default_number_) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(_default_number_);
  }
  // @@protoc_insertion_point(field_set_allocated:contact.contacts.number)
}

// repeated .contact.contacts.Groups groups = 3;
inline int contacts::groups_size() const {
  return groups_.size();
}
inline void contacts::clear_groups() {
  groups_.Clear();
}
inline ::contact::contacts_Groups contacts::groups(int index) const {
  // @@protoc_insertion_point(field_get:contact.contacts.groups)
  return static_cast< ::contact::contacts_Groups >(groups_.Get(index));
}
inline void contacts::set_groups(int index, ::contact::contacts_Groups value) {
  assert(::contact::contacts_Groups_IsValid(value));
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:contact.contacts.groups)
}
inline void contacts::add_groups(::contact::contacts_Groups value) {
  assert(::contact::contacts_Groups_IsValid(value));
  groups_.Add(value);
  // @@protoc_insertion_point(field_add:contact.contacts.groups)
}
inline const ::google::protobuf::RepeatedField<int>&
contacts::groups() const {
  // @@protoc_insertion_point(field_list:contact.contacts.groups)
  return groups_;
}
inline ::google::protobuf::RepeatedField<int>*
contacts::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:contact.contacts.groups)
  return &groups_;
}

// repeated int32 priority = 4;
inline int contacts::priority_size() const {
  return priority_.size();
}
inline void contacts::clear_priority() {
  priority_.Clear();
}
inline ::google::protobuf::int32 contacts::priority(int index) const {
  // @@protoc_insertion_point(field_get:contact.contacts.priority)
  return priority_.Get(index);
}
inline void contacts::set_priority(int index, ::google::protobuf::int32 value) {
  priority_.Set(index, value);
  // @@protoc_insertion_point(field_set:contact.contacts.priority)
}
inline void contacts::add_priority(::google::protobuf::int32 value) {
  priority_.Add(value);
  // @@protoc_insertion_point(field_add:contact.contacts.priority)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
contacts::priority() const {
  // @@protoc_insertion_point(field_list:contact.contacts.priority)
  return priority_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
contacts::mutable_priority() {
  // @@protoc_insertion_point(field_mutable_list:contact.contacts.priority)
  return &priority_;
}

// repeated string email = 5;
inline int contacts::email_size() const {
  return email_.size();
}
inline void contacts::clear_email() {
  email_.Clear();
}
inline const ::std::string& contacts::email(int index) const {
  // @@protoc_insertion_point(field_get:contact.contacts.email)
  return email_.Get(index);
}
inline ::std::string* contacts::mutable_email(int index) {
  // @@protoc_insertion_point(field_mutable:contact.contacts.email)
  return email_.Mutable(index);
}
inline void contacts::set_email(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:contact.contacts.email)
  email_.Mutable(index)->assign(value);
}
inline void contacts::set_email(int index, const char* value) {
  email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:contact.contacts.email)
}
inline void contacts::set_email(int index, const char* value, size_t size) {
  email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:contact.contacts.email)
}
inline ::std::string* contacts::add_email() {
  return email_.Add();
}
inline void contacts::add_email(const ::std::string& value) {
  email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:contact.contacts.email)
}
inline void contacts::add_email(const char* value) {
  email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:contact.contacts.email)
}
inline void contacts::add_email(const char* value, size_t size) {
  email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:contact.contacts.email)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
contacts::email() const {
  // @@protoc_insertion_point(field_list:contact.contacts.email)
  return email_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
contacts::mutable_email() {
  // @@protoc_insertion_point(field_mutable_list:contact.contacts.email)
  return &email_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace contact

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::contact::contacts_Groups> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contact::contacts_Groups>() {
  return ::contact::contacts_Groups_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contacts_2eproto__INCLUDED
