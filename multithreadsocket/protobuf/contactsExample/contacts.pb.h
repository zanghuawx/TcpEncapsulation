// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contacts.proto

#ifndef PROTOBUF_contacts_2eproto__INCLUDED
#define PROTOBUF_contacts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace contactproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_contacts_2eproto();
void protobuf_AssignDesc_contacts_2eproto();
void protobuf_ShutdownFile_contacts_2eproto();

class Person;
class Person_PhoneNumber;
class ContactBook;
class CompanyInfo;

enum Person_Groups {
  Person_Groups_FAMILY = 0,
  Person_Groups_FRIEND = 1,
  Person_Groups_CLASSMATE = 2,
  Person_Groups_WORKMATE = 3,
  Person_Groups_COLLEGE = 4,
  Person_Groups_STRANGER = 5
};
bool Person_Groups_IsValid(int value);
const Person_Groups Person_Groups_Groups_MIN = Person_Groups_FAMILY;
const Person_Groups Person_Groups_Groups_MAX = Person_Groups_STRANGER;
const int Person_Groups_Groups_ARRAYSIZE = Person_Groups_Groups_MAX + 1;

const ::google::protobuf::EnumDescriptor* Person_Groups_descriptor();
inline const ::std::string& Person_Groups_Name(Person_Groups value) {
  return ::google::protobuf::internal::NameOfEnum(
    Person_Groups_descriptor(), value);
}
inline bool Person_Groups_Parse(
    const ::std::string& name, Person_Groups* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Person_Groups>(
    Person_Groups_descriptor(), name, value);
}
// ===================================================================

class Person_PhoneNumber : public ::google::protobuf::Message {
 public:
  Person_PhoneNumber();
  virtual ~Person_PhoneNumber();

  Person_PhoneNumber(const Person_PhoneNumber& from);

  inline Person_PhoneNumber& operator=(const Person_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person_PhoneNumber& default_instance();

  void Swap(Person_PhoneNumber* other);

  // implements Message ----------------------------------------------

  Person_PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person_PhoneNumber& from);
  void MergeFrom(const Person_PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional .contactproto.Person.Groups group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::contactproto::Person_Groups group() const;
  inline void set_group(::contactproto::Person_Groups value);

  // @@protoc_insertion_point(class_scope:contactproto.Person.PhoneNumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* number_;
  int group_;
  friend void  protobuf_AddDesc_contacts_2eproto();
  friend void protobuf_AssignDesc_contacts_2eproto();
  friend void protobuf_ShutdownFile_contacts_2eproto();

  void InitAsDefaultInstance();
  static Person_PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Person_PhoneNumber PhoneNumber;

  typedef Person_Groups Groups;
  static const Groups FAMILY = Person_Groups_FAMILY;
  static const Groups FRIEND = Person_Groups_FRIEND;
  static const Groups CLASSMATE = Person_Groups_CLASSMATE;
  static const Groups WORKMATE = Person_Groups_WORKMATE;
  static const Groups COLLEGE = Person_Groups_COLLEGE;
  static const Groups STRANGER = Person_Groups_STRANGER;
  static inline bool Groups_IsValid(int value) {
    return Person_Groups_IsValid(value);
  }
  static const Groups Groups_MIN =
    Person_Groups_Groups_MIN;
  static const Groups Groups_MAX =
    Person_Groups_Groups_MAX;
  static const int Groups_ARRAYSIZE =
    Person_Groups_Groups_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Groups_descriptor() {
    return Person_Groups_descriptor();
  }
  static inline const ::std::string& Groups_Name(Groups value) {
    return Person_Groups_Name(value);
  }
  static inline bool Groups_Parse(const ::std::string& name,
      Groups* value) {
    return Person_Groups_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1 [default = "lishimin"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .contactproto.Person.PhoneNumber phones = 3;
  inline int phones_size() const;
  inline void clear_phones();
  static const int kPhonesFieldNumber = 3;
  inline const ::contactproto::Person_PhoneNumber& phones(int index) const;
  inline ::contactproto::Person_PhoneNumber* mutable_phones(int index);
  inline ::contactproto::Person_PhoneNumber* add_phones();
  inline const ::google::protobuf::RepeatedPtrField< ::contactproto::Person_PhoneNumber >&
      phones() const;
  inline ::google::protobuf::RepeatedPtrField< ::contactproto::Person_PhoneNumber >*
      mutable_phones();

  // optional int32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional string email = 5;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:contactproto.Person)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::contactproto::Person_PhoneNumber > phones_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 priority_;
  ::std::string* email_;
  friend void  protobuf_AddDesc_contacts_2eproto();
  friend void protobuf_AssignDesc_contacts_2eproto();
  friend void protobuf_ShutdownFile_contacts_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class ContactBook : public ::google::protobuf::Message {
 public:
  ContactBook();
  virtual ~ContactBook();

  ContactBook(const ContactBook& from);

  inline ContactBook& operator=(const ContactBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactBook& default_instance();

  void Swap(ContactBook* other);

  // implements Message ----------------------------------------------

  ContactBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactBook& from);
  void MergeFrom(const ContactBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .contactproto.Person people = 1;
  inline int people_size() const;
  inline void clear_people();
  static const int kPeopleFieldNumber = 1;
  inline const ::contactproto::Person& people(int index) const;
  inline ::contactproto::Person* mutable_people(int index);
  inline ::contactproto::Person* add_people();
  inline const ::google::protobuf::RepeatedPtrField< ::contactproto::Person >&
      people() const;
  inline ::google::protobuf::RepeatedPtrField< ::contactproto::Person >*
      mutable_people();

  // @@protoc_insertion_point(class_scope:contactproto.ContactBook)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::contactproto::Person > people_;
  friend void  protobuf_AddDesc_contacts_2eproto();
  friend void protobuf_AssignDesc_contacts_2eproto();
  friend void protobuf_ShutdownFile_contacts_2eproto();

  void InitAsDefaultInstance();
  static ContactBook* default_instance_;
};
// -------------------------------------------------------------------

class CompanyInfo : public ::google::protobuf::Message {
 public:
  CompanyInfo();
  virtual ~CompanyInfo();

  CompanyInfo(const CompanyInfo& from);

  inline CompanyInfo& operator=(const CompanyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompanyInfo& default_instance();

  void Swap(CompanyInfo* other);

  // implements Message ----------------------------------------------

  CompanyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompanyInfo& from);
  void MergeFrom(const CompanyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "bandary"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);

  // optional .contactproto.ContactBook contactbook = 3;
  inline bool has_contactbook() const;
  inline void clear_contactbook();
  static const int kContactbookFieldNumber = 3;
  inline const ::contactproto::ContactBook& contactbook() const;
  inline ::contactproto::ContactBook* mutable_contactbook();
  inline ::contactproto::ContactBook* release_contactbook();
  inline void set_allocated_contactbook(::contactproto::ContactBook* contactbook);

  // @@protoc_insertion_point(class_scope:contactproto.CompanyInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_contactbook();
  inline void clear_has_contactbook();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::std::string* name_;
  ::contactproto::ContactBook* contactbook_;
  ::google::protobuf::int32 amount_;
  friend void  protobuf_AddDesc_contacts_2eproto();
  friend void protobuf_AssignDesc_contacts_2eproto();
  friend void protobuf_ShutdownFile_contacts_2eproto();

  void InitAsDefaultInstance();
  static CompanyInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Person_PhoneNumber

// optional string number = 1;
inline bool Person_PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person_PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person_PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person_PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& Person_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:contactproto.Person.PhoneNumber.number)
  return *number_;
}
inline void Person_PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:contactproto.Person.PhoneNumber.number)
}
inline void Person_PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:contactproto.Person.PhoneNumber.number)
}
inline void Person_PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:contactproto.Person.PhoneNumber.number)
}
inline ::std::string* Person_PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:contactproto.Person.PhoneNumber.number)
  return number_;
}
inline ::std::string* Person_PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:contactproto.Person.PhoneNumber.number)
}

// optional .contactproto.Person.Groups group = 2;
inline bool Person_PhoneNumber::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person_PhoneNumber::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person_PhoneNumber::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person_PhoneNumber::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::contactproto::Person_Groups Person_PhoneNumber::group() const {
  // @@protoc_insertion_point(field_get:contactproto.Person.PhoneNumber.group)
  return static_cast< ::contactproto::Person_Groups >(group_);
}
inline void Person_PhoneNumber::set_group(::contactproto::Person_Groups value) {
  assert(::contactproto::Person_Groups_IsValid(value));
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:contactproto.Person.PhoneNumber.group)
}

// -------------------------------------------------------------------

// Person

// required string name = 1 [default = "lishimin"];
inline bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:contactproto.Person.name)
  return *name_;
}
inline void Person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:contactproto.Person.name)
}
inline void Person::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:contactproto.Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:contactproto.Person.name)
}
inline ::std::string* Person::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  // @@protoc_insertion_point(field_mutable:contactproto.Person.name)
  return name_;
}
inline ::std::string* Person::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:contactproto.Person.name)
}

// optional int32 id = 2;
inline bool Person::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:contactproto.Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:contactproto.Person.id)
}

// repeated .contactproto.Person.PhoneNumber phones = 3;
inline int Person::phones_size() const {
  return phones_.size();
}
inline void Person::clear_phones() {
  phones_.Clear();
}
inline const ::contactproto::Person_PhoneNumber& Person::phones(int index) const {
  // @@protoc_insertion_point(field_get:contactproto.Person.phones)
  return phones_.Get(index);
}
inline ::contactproto::Person_PhoneNumber* Person::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:contactproto.Person.phones)
  return phones_.Mutable(index);
}
inline ::contactproto::Person_PhoneNumber* Person::add_phones() {
  // @@protoc_insertion_point(field_add:contactproto.Person.phones)
  return phones_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::contactproto::Person_PhoneNumber >&
Person::phones() const {
  // @@protoc_insertion_point(field_list:contactproto.Person.phones)
  return phones_;
}
inline ::google::protobuf::RepeatedPtrField< ::contactproto::Person_PhoneNumber >*
Person::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:contactproto.Person.phones)
  return &phones_;
}

// optional int32 priority = 4;
inline bool Person::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Person::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Person::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Person::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 Person::priority() const {
  // @@protoc_insertion_point(field_get:contactproto.Person.priority)
  return priority_;
}
inline void Person::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:contactproto.Person.priority)
}

// optional string email = 5;
inline bool Person::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Person::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Person::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Person::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:contactproto.Person.email)
  return *email_;
}
inline void Person::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:contactproto.Person.email)
}
inline void Person::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:contactproto.Person.email)
}
inline void Person::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:contactproto.Person.email)
}
inline ::std::string* Person::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:contactproto.Person.email)
  return email_;
}
inline ::std::string* Person::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:contactproto.Person.email)
}

// -------------------------------------------------------------------

// ContactBook

// repeated .contactproto.Person people = 1;
inline int ContactBook::people_size() const {
  return people_.size();
}
inline void ContactBook::clear_people() {
  people_.Clear();
}
inline const ::contactproto::Person& ContactBook::people(int index) const {
  // @@protoc_insertion_point(field_get:contactproto.ContactBook.people)
  return people_.Get(index);
}
inline ::contactproto::Person* ContactBook::mutable_people(int index) {
  // @@protoc_insertion_point(field_mutable:contactproto.ContactBook.people)
  return people_.Mutable(index);
}
inline ::contactproto::Person* ContactBook::add_people() {
  // @@protoc_insertion_point(field_add:contactproto.ContactBook.people)
  return people_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::contactproto::Person >&
ContactBook::people() const {
  // @@protoc_insertion_point(field_list:contactproto.ContactBook.people)
  return people_;
}
inline ::google::protobuf::RepeatedPtrField< ::contactproto::Person >*
ContactBook::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:contactproto.ContactBook.people)
  return &people_;
}

// -------------------------------------------------------------------

// CompanyInfo

// optional string name = 1 [default = "bandary"];
inline bool CompanyInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompanyInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompanyInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompanyInfo::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& CompanyInfo::name() const {
  // @@protoc_insertion_point(field_get:contactproto.CompanyInfo.name)
  return *name_;
}
inline void CompanyInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:contactproto.CompanyInfo.name)
}
inline void CompanyInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:contactproto.CompanyInfo.name)
}
inline void CompanyInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:contactproto.CompanyInfo.name)
}
inline ::std::string* CompanyInfo::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  // @@protoc_insertion_point(field_mutable:contactproto.CompanyInfo.name)
  return name_;
}
inline ::std::string* CompanyInfo::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void CompanyInfo::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:contactproto.CompanyInfo.name)
}

// optional int32 amount = 2;
inline bool CompanyInfo::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompanyInfo::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompanyInfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompanyInfo::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 CompanyInfo::amount() const {
  // @@protoc_insertion_point(field_get:contactproto.CompanyInfo.amount)
  return amount_;
}
inline void CompanyInfo::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:contactproto.CompanyInfo.amount)
}

// optional .contactproto.ContactBook contactbook = 3;
inline bool CompanyInfo::has_contactbook() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompanyInfo::set_has_contactbook() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompanyInfo::clear_has_contactbook() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompanyInfo::clear_contactbook() {
  if (contactbook_ != NULL) contactbook_->::contactproto::ContactBook::Clear();
  clear_has_contactbook();
}
inline const ::contactproto::ContactBook& CompanyInfo::contactbook() const {
  // @@protoc_insertion_point(field_get:contactproto.CompanyInfo.contactbook)
  return contactbook_ != NULL ? *contactbook_ : *default_instance_->contactbook_;
}
inline ::contactproto::ContactBook* CompanyInfo::mutable_contactbook() {
  set_has_contactbook();
  if (contactbook_ == NULL) contactbook_ = new ::contactproto::ContactBook;
  // @@protoc_insertion_point(field_mutable:contactproto.CompanyInfo.contactbook)
  return contactbook_;
}
inline ::contactproto::ContactBook* CompanyInfo::release_contactbook() {
  clear_has_contactbook();
  ::contactproto::ContactBook* temp = contactbook_;
  contactbook_ = NULL;
  return temp;
}
inline void CompanyInfo::set_allocated_contactbook(::contactproto::ContactBook* contactbook) {
  delete contactbook_;
  contactbook_ = contactbook;
  if (contactbook) {
    set_has_contactbook();
  } else {
    clear_has_contactbook();
  }
  // @@protoc_insertion_point(field_set_allocated:contactproto.CompanyInfo.contactbook)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace contactproto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::contactproto::Person_Groups> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contactproto::Person_Groups>() {
  return ::contactproto::Person_Groups_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contacts_2eproto__INCLUDED
